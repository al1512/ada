------------------------------------------------------------------------------
--                                                                          --
--  File generated by gate3                                                 --
--  Glade3 original file : Essai1.glade
--  Generation date  : 2021-07-14 17:08:28                                  --
--
--  Gate3 web site : https://sourceforge.net/projects/lorenz/                                                                   --
------------------------------------------------------------------------------
------------------------------------------------------------------------------
--  Legal licensing note : !!! Edit the file gate3_license.txt !!!
--
--  Copyright (c) F. J. FABIEN - 2013
--  Berry
--  FRANCE
--  Send bug reports or feedback to : francois_fabien@hotmail.com
--
--  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
--  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
--  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
--  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
--  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
--  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
--  DEALINGS IN THE SOFTWARE.
--  NB: this is the MIT License, as found 12-Sep-2007 on the site
--  http://www.opensource.org/licenses/mit-license.php
------------------------------------------------------------------------------
-- units from Gtk
with Generic_Tree;
with Gtk;            use Gtk;
with Gtk.Main;
with Glib;           use Glib;
with Glib.Object;    use Glib.Object;
with Glib.Error;     use Glib.Error;
with Glib.Types; use Glib.Types;

with Gtk.Widget;     use Gtk.Widget;
with Gtkada.Builder; use Gtkada.Builder;
with Gtk.Tree_Store; use Gtk.Tree_Store;
with Gtk.Tree_View;  use Gtk.Tree_View;
with Gtk.Tree_Model; use Gtk.Tree_Model;
with Gtk.Drawing_Area;
with Gdk.cairo;
with Cairo;         use Cairo;
with Gtk.handlers; use Gtk.handlers;
with Gtk.Message_Dialog; use Gtk.Message_Dialog;
with Gtk.Dialog;



-- Ada predefined units
with Ada.Text_IO;    use Ada.Text_IO;
with Ada.Exceptions; use Ada.Exceptions;
with Ada.Directories; use Ada.Directories;
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;


-- Application specific units
--with Window1_Callbacks; use Window1_Callbacks;
with tree_functions; use tree_functions;
with Tree_Global;
with system;

package body Interface_package is  

   Builder       : Gtkada_Builder;
   Error         : aliased Glib.Error.GError;
   GladeFileName : constant String := "./src/gui/essaie2.glade";
   Drawing_Area : Gtk.Drawing_Area.Gtk_Drawing_Area;  -- Déclaration comme une variable
   Popup_Dialog   : Gtk.Message_Dialog.Gtk_Message_Dialog;
   

   function Window_Delete (Builder : access Gtkada_Builder_Record'Class) return Boolean is 
   begin 
      Gtk.Main.Main_Quit;
      return True;
   end Window_Delete;

   function Redraw
     (Area : access Gtk.Drawing_Area.Gtk_Drawing_Area_Record'Class; Cr : Cairo.Cairo_Context) return Boolean is    
      X : Glib.Gdouble := 50.0;
      Y : Glib.Gdouble := 400.0;
      --X_Offset : Glib.Gdouble := 10.0;
      --Y_Offset : Glib.Gdouble := 150.0;
   begin
      --Cr := Gtk.Widget.Get_Cairo_Create (Gtk.Widget.Gtk_Widget (Drawing_Area));
      Tree_Global.On_Draw (Cr,X,Y);
      --Cairo.Destroy (Cr);
      return false;
   end Redraw;

   procedure Pop_up (message : Unbounded_String) is
       Status : Gtk.Dialog.Gtk_Response_Type;
       format_messsage : Unbounded_String;
   begin 
      put_Line(To_String(message));
      format_messsage := "<b>" & message & "</b>";
      Put_Line (To_String(format_messsage));
      Gtk.Message_Dialog.Set_Markup (Popup_Dialog,To_String(format_messsage));
      Status := Gtk.Message_Dialog.Run ((Popup_Dialog));
      Popup_Dialog.Hide;
   end Pop_up;

 procedure Get_known_parents_Callback (Builder : access Gtkada_Builder_Record'Class) is 
   message : Unbounded_String;
   begin
      message := Get_known_parents;
      Pop_up (message);
   end Get_known_parents_Callback;

procedure Get_gen_n_parents_Callback (Builder : access Gtkada_Builder_Record'Class) is
   message : Unbounded_String;
begin
   message := Get_gen_n_parents;
   Pop_up (message);
end Get_gen_n_parents_Callback;

procedure N_parent_Callback (Builder : access Gtkada_Builder_Record'Class) is 
   message : Unbounded_String;
   begin
      message := N_parent;
      Pop_up (message);
   end N_parent_Callback;

procedure main_GUI is
   
begin

   Gtk.Main.Init;

   -- Step 1: create a Builder and add the XML data

   Gtk_New (Builder);
   if Add_From_File (Builder, GladeFileName, Error'Access) = 0 then
       Put_Line ("Error : " & Get_Message (Error));
       Error_Free (Error);
       Put_Line ("Répertoire courant : " & Current_Directory);
       return;
   end if;

   --  Step 2: add calls to "Register_Handler" to associate your
   --  handlers with your callbacks.

   Register_Handler (Builder, "Add_node", Add_node'Access);
   Register_Handler (Builder, "Supp_node", Supp_node'Access);
   Register_Handler (Builder, "Get_known_parents", Get_known_parents_Callback'Access);
   Register_Handler (Builder, "Get_gen_n_parents", Get_gen_n_parents_Callback'Access);
   Register_Handler (Builder, "Specific_tree", Specific_tree'Access);
   Register_Handler (Builder, "Create_Tree", Create_Tree'Access);
   Register_Handler (Builder, "Reset", Reset_Tree'Access);
   Register_Handler (Builder, "Empty", Empty_Tree'Access);
   Register_Handler (Builder, "N_known_parent", N_parent_Callback'Access);
   Register_Handler (Builder, "Window_Delete", Window_Delete'Access);
   --Register_Handler (Builder, "New_Draw", Redraw'Access);
   if (Get_Object (Builder, "pop_up")) = null then
      Put_Line ("NULLLL");
   end if;
   Drawing_Area := Gtk.Drawing_Area.Gtk_Drawing_Area (Get_Object (Builder, "drawing_area"));
   --Drawing_Area := Gtk.Drawing_Area.Gtk_Drawing_Area (Get_Object (Builder, "Pop_up_dialogue"));
   Popup_Dialog := Gtk.Message_Dialog.Gtk_Message_Dialog(Get_Object (Builder, "pop_up"));
   if Popup_Dialog = null then
   Ada.Text_IO.Put_Line ("Erreur : Le widget 'Pop_up' est introuvable ou invalide dans Glade.");
   return;
   end if;
    Event_Cb.Connect
     (Drawing_Area,
      Signal_Draw,
      Event_Cb.To_Marshaller (Redraw'Access));
   -- Step 3: call Do_Connect. Once to connect all registered handlers

   Do_Connect (Builder);

   Put_Line ("Essai1 : loading and connexion of builder OK ");

   -- Step 3.5 : display the windows and all of their children.
   --            Remove objects than are not windows as necessary.

   Show_All (Gtk.Widget.Gtk_Widget (Get_Object (Builder, "Windows1")));
   Gtk.Main.Main;

   --  Step 4: when the application terminates
   --          call Unref to free memory associated with the Builder.
   Unref (Builder);
   Put_Line ("Program Essai1 is finished !");

exception
   when Error : others =>
      Ada.Text_IO.Put_Line (Ada.Exceptions.Exception_Information (Error));

end main_GUI;
end Interface_package;
